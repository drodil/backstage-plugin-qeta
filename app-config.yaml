app:
  title: Q&A Dev App
  baseUrl: http://localhost:3000

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  database:
    # client: better-sqlite3 # Use this if you don't have docker
    # connection: ':memory:'
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: postgres
    knexConfig:
      pool:
        min: 15
        max: 30
        acquireTimeoutMillis: 60000
        createTimeoutMillis: 30000
        destroyTimeoutMillis: 5000
        idleTimeoutMillis: 60000
        reapIntervalMillis: 1000
        createRetryIntervalMillis: 200
        propagateCreateError: false
  cache:
    store: memory
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  reading:
    allow:
      - host: localhost
auth:
  environment: development
  providers:
    guest: {}

permission:
  enabled: true

catalog:
  orphanStrategy: delete
  processingInterval: { minutes: 1 }
  rules:
    - allow: [ Component, API, Resource, User, Group ]
  locations:
    - type: file
      target: ../../local_dev.yaml

events:
  useEventBus: 'never'

qeta:
  storage:
    type: database
    # maxSizeImage: 2500000
    # allowedFilesTypes: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif']
  allowAnonymous: true
  allowMetadataInput: false
  #allowGlobalEdits: true
  permissions: true
  entities:
    max: 2
  tags:
    #allowCreation: false
    #allowedTags:
      #- test
      #- another_tag
    max: 3
  moderators:
    - 'user:development/guest'
  entityKinds:
    - Component
    - Resource
    - Group
    - System
  aiBotName: 'Q&A Bot'
  stats:
    schedule:
      frequency: { minutes: 1 }
      initialDelay: { seconds: 30 }
      timeout: { minutes: 10 }
      scope: global
  tagUpdater:
    schedule:
      frequency: { minutes: 1 }
      initialDelay: { seconds: 30 }
      timeout: { minutes: 10 }
      scope: global
  attachmentCleaner:
    schedule:
      frequency: { minutes: 1 }
      initialDelay: { seconds: 30 }
      timeout: { minutes: 10 }
      scope: global
    dayLimit: 1
  openai:
    apiKey: ${OPENAI_API_KEY}
    organization: ${OPENAI_ORGANIZATION}